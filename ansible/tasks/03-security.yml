- name: Enable nftables service
  systemd:
    name: nftables
    enabled: yes
    state: started
    daemon_reload: yes

- name: Ensure obscured directory exists
  file:
    path: "{{ obscured_dir }}"
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Copy deploy script
  copy:
    src: "files/deploy.sh"
    dest: "{{ obscured_dir }}/deploy.sh"
    mode: '0755'
    owner: root
    group: root

- name: Copy rbash.sh script
  copy:
    src: "files/rbash.sh"
    dest: "{{ obscured_dir }}/rbash.sh"
    mode: '0755'
    owner: root
    group: root

- name: Create a non-privileged user group
  group:
    name: "{{ deploy_group }}"
    state: present

- name: Ensure users exist
  user:
    name: "{{ item.name }}"
    shell: "{{ item.shell }}"
    groups: "{{ item.groups }}"
    append: yes
    create_home: yes
  loop:
    - { name: "{{ admin_user }}", groups: "sudo", shell: "/bin/bash" }
    - { name: "{{ deploy_user }}", groups: "{{ deploy_group }}", shell: "{{ obscured_dir }}/rbash.sh" }

- name: Configure sudoers for restricted access
  copy:
    dest: "/etc/sudoers.d/{{ deploy_group }}"
    owner: root
    group: root
    mode: '0440'
    content: |
      # Sudoers configuration for {{ deploy_group }}

      # Allow specific binaries with NOPASSWD
      %{{ deploy_group }} ALL=(ALL) NOPASSWD:
        /usr/bin/tee /etc/nginx/conf.d/active_color.conf,
        /usr/sbin/nginx -s reload

      # Prevent privilege escalation
      Defaults:{{ deploy_group }} !visiblepw
      Defaults:{{ deploy_group }} always_set_home
      Defaults:{{ deploy_group }} match_group_by_gid
      Defaults:{{ deploy_group }} always_query_group_plugin
      Defaults:{{ deploy_group }} env_reset
      Defaults:{{ deploy_group }} secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

- name: Ensure restricted directories exist
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop: "{{ restricted_dirs }}"

- name: Remove access to sensitive directories
  acl:
    path: "{{ item }}"
    entity: "{{ deploy_group }}"
    etype: group
    permissions: "---"
    recursive: yes
    state: present
  loop: "{{ restricted_dirs }}"

- name: Set ssh keys for users
  authorized_key:
    user: "{{ item.user }}"
    state: present
    key: "{{ item.key }}"
  loop:
    - { user: "{{ admin_user }}", key: "{{ lookup('file', admin.pub) }}" }
    - { user: "{{ deploy_user }}", key: "{{ lookup('file', deploy.pub) }}" }

- name: Backup existing sshd_config
  copy:
    src: /etc/ssh/sshd_config
    dest: /etc/ssh/sshd_config.backup
    remote_src: yes
    owner: root
    group: root
    mode: '0600'

- name: Apply strict sshd_config
  copy:
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: '0600'
    content: |
      Port {{ ssh_port }}
      Protocol 2
      PermitRootLogin no
      PasswordAuthentication no
      ChallengeResponseAuthentication no
      KbdInteractiveAuthentication no
      PermitEmptyPasswords no
      PubkeyAuthentication yes

      X11Forwarding no
      AllowTcpForwarding no
      PermitTunnel no

      LoginGraceTime 20
      MaxAuthTries 3
      MaxSessions 5

      Match Group {{ deploy_group }}
        ForceCommand {{ obscured_dir }}/rbash.sh

- name: Restart SSH service
  service:
    name: ssh
    state: restarted
